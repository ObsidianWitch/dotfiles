#!/bin/bash

set -o errexit -o nounset

backup_local() {
    local in=( "$HOME/" )
    local out="/run/media/$USER/yayaka_storage/$USER"
    rsync --archive --delete --prune-empty-dirs --protect-args --progress \
          --exclude '.cache' \
          -- "${in[@]}" "$out"
}

restore_local() {
    local in="/run/media/$USER/yayaka_storage/$USER/"
    local out="$HOME"
    rsync --archive --protect-args --progress \
          -- "$in" "$out"
}

backup_archive() {
    local in=(
        "$HOME/Documents"
        "$HOME/.dotfiles"
        "$HOME/.dotprivate"
    )
    local out; out="$(date +'b%y%m%d.tar.enc')"
    tar --create --verbose --preserve-permissions "${in[@]}" \
        | gpg --symmetric --output "$out"
}

restore_archive() {
    gpg --decrypt "$1" | tar --extract --verbose
}

sync_phone() {
    local in=(
        "$HOME/Downloads"
        "$HOME/Music"
        "$HOME/.dotprivate"
    )
    local out="/run/media/$USER/C2C2-14E6/"
    rsync --archive --size-only --delete --prune-empty-dirs --protect-args \
          --progress \
          -- "${in[@]}" "$out"

    # faster to backup one big file than many small ones, especially on a
    # poor quality SD card
    cd "$out"
    backup_archive
}

help() {
    echo 'usage: dotbackup local'
    echo '       dotbackup archive'
    echo '       dotbackup phone'
    exit 1
}

[[ -n "${1:-}" ]] || help
if [[ "$1" == "local" ]]; then
    backup_local
elif [[ "$1" == "archive" ]]; then
    backup_archive
elif [[ "$1" == "phone" ]]; then
    sync_phone
else
    help
fi
